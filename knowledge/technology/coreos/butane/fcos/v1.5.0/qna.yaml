version: 3
domain: technology
created_by: coreos
seed_examples:
  - context: >-
      * **_storage_** (object): describes the desired state of the system's storage devices.
        * **_disks_** (list of objects): the list of disks to be configured and their options. Every entry must have a unique `device`.
          * **device** (string): the absolute path to the device. Devices are typically referenced by the `/dev/disk/by-*` symlinks. The boot disk can be referenced as `/dev/disk/by-id/coreos-boot-disk`.
          * **_wipe_table_** (boolean): whether or not the partition tables shall be wiped. When true, the partition tables are erased before any further manipulation. Otherwise, the existing entries are left intact.
          * **_partitions_** (list of objects): the list of partitions and their configuration for this particular disk. Every partition must have a unique `number`, or if 0 is specified, a unique `label`.
            * **_label_** (string): the PARTLABEL for the partition.
            * **_number_** (integer): the partition number, which dictates its position in the partition table (one-indexed). If zero, use the next available partition slot.
            * **_size_mib_** (integer): the size of the partition (in mebibytes). If zero, the partition will be made as large as possible.
            * **_start_mib_** (integer): the start of the partition (in mebibytes). If zero, the partition will be positioned at the start of the largest block available.
            * **_type_guid_** (string): the GPT [partition type GUID](https://en.wikipedia.org/wiki/GUID_Partition_Table#Partition_type_GUIDs). If omitted, the default will be 0FC63DAF-8483-4772-8E79-3D69D8477DE4 (Linux filesystem data).
            * **_guid_** (string): the GPT unique partition GUID.
            * **_wipe_partition_entry_** (boolean): if true, Ignition will clobber an existing partition if it does not match the config. If false (default), Ignition will fail instead.
            * **_should_exist_** (boolean): whether or not the partition with the specified `number` should exist. If omitted, it defaults to true. If false Ignition will either delete the specified partition or fail, depending on `wipePartitionEntry`. If false `number` must be specified and non-zero and `label`, `start`, `size`, `guid`, and `typeGuid` must all be omitted.
    questions_and_answers:
      - question: |
          In Butane's FCOS spec what is the purpose of 'storage'?
        answer: |
          The 'storage' field describes the desired state of the system's storage devices.
      - question: |
          Give me a simple example butane fcos configuration which uses the 'storage' field.
        answer: |
          Here is an example fcos butane configuration which creates a single partition
          spanning all of the sdb device.

          variant: fcos
          version: 1.1.0
          storage:
            disks:
              - device: /dev/sdb
                wipe_table: true
                partitions:
                  - number: 1
                    label: var
      - question: |
          What is a device in regards to butane fcos spec file?
        answer: |
          A 'device' in regards to the butane fcos spec file is a (string), which is the absolute path to the device.
          Devices are typically referenced by the `/dev/disk/by-*` symlinks. The boot disk can be referenced as
          `/dev/disk/by-id/coreos-boot-disk`.
  - context: >-
      The Fedora CoreOS configuration is a YAML document conforming to the following specification, with
      **_italicized_** entries being optional:

      <div id="spec-docs"></div>

      * **variant** (string): used to differentiate configs for different operating systems. Must be `fcos` for this
        specification.
      * **version** (string): the semantic version of the spec for this document. This document is for version `1.5.0`
        and generates Ignition configs with version `3.4.0`.
      * **_ignition_** (object): metadata about the configuration itself.
        * **_config_** (object): options related to the configuration.
          * **_merge_** (list of objects): a list of the configs to be merged to the current config.
    questions_and_answers:
      - question: |
          How can I tell which fields are required when looking at the fcos spec file for butane?
        answer: |
          The Fedora CoreOS configuration is a YAML document conforming to the following specification, with
          **_italicized_** entries being optional.
      - question: Then that means that in the butane fcos spec file the 'merge' field is optional?
        answer: |
          Yes, that is correct; the 'merge' field is optional.
      - question: |
          Give me an fcos butane config with all the required fields satisfied.
        answer: |
          The most basic butane config would be a config which specifys nothing other then the 'variant' fcos,
          and the targeted version. It would look like this:

          variant: fcos
          version: 1.1.0
  - context: >-
      * **_files_** (list of objects): the list of files to be written. Every file, directory and link must have a unique `path`.
        * **path** (string): the absolute path to the file.
        * **_overwrite_** (boolean): whether to delete preexisting nodes at the path. `contents` must be specified if `overwrite` is true. Defaults to false.
        * **_contents_** (object): options related to the contents of the file.
          * **_source_** (string): the URL of the file. Supported schemes are `http`, `https`, `tftp`, `s3`, `arn`, `gs`, and [`data`](https://tools.ietf.org/html/rfc2397). When using `http`, it is advisable to use the verification option to ensure the contents haven't been modified. If source is omitted and a regular file already exists at the path, Ignition will do nothing. If source is omitted and no file exists, an empty file will be created. Mutually exclusive with `inline` and `local`.
          * **_inline_** (string): the contents of the file. Mutually exclusive with `source` and `local`.
          * **_local_** (string): a local path to the contents of the file, relative to the directory specified by the `--files-dir` command-line argument. Mutually exclusive with `source` and `inline`.
          * **_compression_** (string): the type of compression used on the file (null or gzip). Compression cannot be used with S3.
          * **_http_headers_** (list of objects): a list of HTTP headers to be added to the request. Available for `http` and `https` source schemes only.
            * **name** (string): the header name.
            * **_value_** (string): the header contents.
          * **_verification_** (object): options related to the verification of the file.
            * **_hash_** (string): the hash of the file, in the form `<type>-<value>` where type is either `sha512` or `sha256`. If `compression` is specified, the hash describes the decompressed file.
        * **_append_** (list of objects): list of fragments to be appended to the file. Follows the same structure as `contents`.
          * **_source_** (string): the URL of the fragment. Supported schemes are `http`, `https`, `tftp`, `s3`, `arn`, `gs`, and [`data`](https://tools.ietf.org/html/rfc2397). When using `http`, it is advisable to use the verification option to ensure the contents haven't been modified. Mutually exclusive with `inline` and `local`.
          * **_inline_** (string): the contents of the fragment. Mutually exclusive with `source` and `local`.
          * **_local_** (string): a local path to the contents of the fragment, relative to the directory specified by the `--files-dir` command-line argument. Mutually exclusive with `source` and `inline`.
          * **_compression_** (string): the type of compression used on the fragment (null or gzip). Compression cannot be used with S3.
          * **_http_headers_** (list of objects): a list of HTTP headers to be added to the request. Available for `http` and `https` source schemes only.
            * **name** (string): the header name.
            * **_value_** (string): the header contents.
          * **_verification_** (object): options related to the verification of the fragment.
            * **_hash_** (string): the hash of the fragment, in the form `<type>-<value>` where type is either `sha512` or `sha256`. If `compression` is specified, the hash describes the decompressed fragment.
        * **_mode_** (integer): the file's permission mode. Setuid/setgid/sticky bits are supported. If not specified, the permission mode for files defaults to 0644 or the existing file's permissions if `overwrite` is false, `contents` is unspecified, and a file already exists at the path.
        * **_user_** (object): specifies the file's owner.
          * **_id_** (integer): the user ID of the owner.
          * **_name_** (string): the user name of the owner.
        * **_group_** (object): specifies the file's group.
          * **_id_** (integer): the group ID of the group.
          * **_name_** (string): the group name of the group.
    questions_and_answers:
      - question: |
          Give me a simple fcos butane config example which has files?
        answer: |
          Here is an example fcos butane config which uses files. It adds an inline file
          with the contents of "Hello, world!", permissions set to "0644" and sets the user
          and group id's.

          variant: fcos
          version: 1.1.0
          storage:
            files:
              - path: /opt/file
                contents:
                  inline: Hello, world!
                mode: 0644
                user:
                  id: 500
                group:
                  id: 501
      - question: |
          What would an fcos butane config look like that created a file in /var/home with it's content coming from a 'source' url?
        answer: |
          A fcos butane config file would look something like this:

          variant: fcos
          version: 1.1.0
          storage:
            files:
              - path: /var/home/file
                contents:
                  source: http://example.com/file2
                  compression: gzip
                  verification:
                    hash: sha512-<yourhashHere>
                mode: 0644
      - question: |
          What would an fcos butane config look like that created a file in /var/home with it's content coming from another local file called local-file3?
        answer: |
          A fcos butane config file would look something like this:

          variant: fcos
          version: 1.1.0
          storage:
            files:
              - path: /var/home/file
                contents:
                  local: local-file3
                mode: 0644
  - context: >-
      * **_passwd_** (object): describes the desired additions to the passwd database.
        * **_users_** (list of objects): the list of accounts that shall exist. All users must have a unique `name`.
          * **name** (string): the username for the account.
          * **_password_hash_** (string): the hashed password for the account.
          * **_ssh_authorized_keys_** (list of strings): a list of SSH keys to be added as an SSH key fragment at `.ssh/authorized_keys.d/ignition` in the user's home directory. All SSH keys must be unique.
          * **_ssh_authorized_keys_local_** (list of strings): a list of local paths to SSH key files, relative to the directory specified by the `--files-dir` command-line argument, to be added as SSH key fragments at `.ssh/authorized_keys.d/ignition` in the user's home directory. All SSH keys must be unique. Each file may contain multiple SSH keys, one per line.
          * **_uid_** (integer): the user ID of the account.
          * **_gecos_** (string): the GECOS field of the account.
          * **_home_dir_** (string): the home directory of the account.
          * **_no_create_home_** (boolean): whether or not to create the user's home directory. This only has an effect if the account doesn't exist yet.
          * **_primary_group_** (string): the name of the primary group of the account.
          * **_groups_** (list of strings): the list of supplementary groups of the account.
          * **_no_user_group_** (boolean): whether or not to create a group with the same name as the user. This only has an effect if the account doesn't exist yet.
          * **_no_log_init_** (boolean): whether or not to add the user to the lastlog and faillog databases. This only has an effect if the account doesn't exist yet.
          * **_shell_** (string): the login shell of the new account.
          * **_should_exist_** (boolean): whether or not the user with the specified `name` should exist. If omitted, it defaults to true. If false, then Ignition will delete the specified user.
          * **_system_** (boolean): whether or not this account should be a system account. This only has an effect if the account doesn't exist yet.
        * **_groups_** (list of objects): the list of groups to be added. All groups must have a unique `name`.
          * **name** (string): the name of the group.
          * **_gid_** (integer): the group ID of the new group.
          * **_password_hash_** (string): the hashed password of the new group.
          * **_should_exist_** (boolean): whether or not the group with the specified `name` should exist. If omitted, it defaults to true. If false, then Ignition will delete the specified group.
          * **_system_** (boolean): whether or not the group should be a system group. This only has an effect if the group doesn't exist yet.
    questions_and_answers:
      - question: |
          Can you give me a simple fcos butane config which uses ssh key "xyz"?
        answer: |
          Here is a simple fcos butane config which uses your ssh key "xyz":

          variant: fcos
          version: 1.1.0
          passwd:
            users:
              - name: core
                ssh_authorized_keys:
                  - xyz
      - question: |
          Can you give me a simple fcos butane config which uses ssh key "xyz" and creates a new user "user1"?
        answer: |
          Here is a simple fcos butane config which uses your ssh key "xyz":

          variant: fcos
          version: 1.1.0
          passwd:
            users:
              - name: user1
                ssh_authorized_keys:
                  - xyz
                home_dir: /home/user1
                no_create_home: true
                groups:
                  - wheel
                  - plugdev
                shell: /bin/bash
      - question: |
          Can you give me a simple fcos butane config which uses password authentication with a password hash of xyz
          and creates a new user "user1"?
        answer: |
          Here is a simple fcos butane config which uses your password hash and creates a "user1":

          variant: fcos
          version: 1.1.0
          passwd:
            users:
              - name: user1
                ssh_authorized_keys:
                  - key1
                password_hash: xyz
                home_dir: /home/user1
                no_create_home: true
                groups:
                  - wheel
                  - plugdev
                shell: /bin/bash
  - context: >-
      * **_filesystems_** (list of objects): the list of filesystems to be configured. `device` and `format` need to be specified. Every filesystem must have a unique `device`.
        * **device** (string): the absolute path to the device. Devices are typically referenced by the `/dev/disk/by-*` symlinks.
        * **format** (string): the filesystem format (ext4, btrfs, xfs, vfat, swap, or none).
        * **_path_** (string): the mount-point of the filesystem while Ignition is running relative to where the root filesystem will be mounted. This is not necessarily the same as where it should be mounted in the real root, but it is encouraged to make it the same.
        * **_wipe_filesystem_** (boolean): whether or not to wipe the device before filesystem creation, see [Ignition's documentation on filesystems](https://coreos.github.io/ignition/operator-notes/#filesystem-reuse-semantics) for more information. Defaults to false.
        * **_label_** (string): the label of the filesystem.
        * **_uuid_** (string): the uuid of the filesystem.
        * **_options_** (list of strings): any additional options to be passed to the format-specific mkfs utility.
        * **_mount_options_** (list of strings): any special options to be passed to the mount command.
        * **_with_mount_unit_** (boolean): whether to additionally generate a generic mount unit for this filesystem or a swap unit for this swap area. If a more specific unit is needed, a custom one can be specified in the `systemd.units` section. The unit will be named with the [escaped](https://www.freedesktop.org/software/systemd/man/systemd-escape.html) version of the `path` or `device`, depending on the unit type. If your filesystem is located on a Tang-backed LUKS device, the unit will automatically require network access if you specify the device as `/dev/mapper/<device-name>` or `/dev/disk/by-id/dm-name-<device-name>`.
    questions_and_answers:
      - question: |
          Can you give me a simple fcos butane config which creates a filesystem on the var partition?
        answer: |
          Here is a simple fcos butane config which creates a filesystem on the var partition:

          variant: fcos
          version: 1.1.0
          storage:
            disks:
              - device: /dev/sdb
                wipe_table: true
                partitions:
                  - number: 1
                    label: var
            filesystems:
              - path: /var
                device: /dev/disk/by-partlabel/var
                format: btrfs
                wipe_filesystem: true
                label: var
                with_mount_unit: true
      - question: |
          Can you give me a simple fcos butane config which creates a filesystem on the var partition using ext4 format?
        answer: |
          Here is a simple fcos butane config which creates a filesystem on the var partition using ext4 format:

          variant: fcos
          version: 1.1.0
          storage:
            disks:
              - device: /dev/sdb
                wipe_table: true
                partitions:
                  - number: 1
                    label: var
            filesystems:
              - path: /var
                device: /dev/disk/by-partlabel/var
                format: ext4
                wipe_filesystem: true
                label: var
                with_mount_unit: true
      - question: |
          Can you give me a simple fcos butane config which creates a filesystem on the var partition with "wipe_filesystem" set to false?
        answer: |
          Here is a simple fcos butane config which creates a filesystem on the var partition with "wipe_filesystem" set to false:

          variant: fcos
          version: 1.1.0
          storage:
            disks:
              - device: /dev/sdb
                wipe_table: true
                partitions:
                  - number: 1
                    label: var
            filesystems:
              - path: /var
                device: /dev/disk/by-partlabel/var
                format: ext4
                wipe_filesystem: false
                label: var
                with_mount_unit: true
document_outline: |
  Information about the FCOS spec file for Butane.
document:
  repo: https://github.com/coreos/butane.git
  commit: 6d2ec2db702306cbbdb5d82b38bccdd6f62ec2a6
  patterns:
    - docs/config-fcos-v1_5.md
